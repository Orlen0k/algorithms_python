"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.
ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
Это файл для третьего скрипта
"""
'''Задача
Написать генератор нечётных чисел от 1 до n (включительно)
'''
from memory_profiler import memory_usage


# Декоратор для профилирования памяти
def memory_measur(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return mem_diff

    return wrapper


# Базовая реализация
@memory_measur
def get_generator(gen_len):
    gen = (num for num in range(1, gen_len + 1, 2))
    return gen


# Оптимизированная реализация
@memory_measur
def get_generator_up(gen_len):
    for n in range(1, gen_len + 1, 2):
        yield n


print(f"Базовая реализация заняла памяти: {get_generator(10000)} Mib")
print(f"Оптимизированная реализация заняла памяти: {get_generator_up(10000)} Mib")

'''Выводы
Базовая реализация заняла памяти: 0.01171875 Mib
Оптимизированная реализация заняла памяти: 0.0 Mib
'''
'''Анализ измененного кода
Использовал в решении yield, что позволило сократить затраты памяти
'''