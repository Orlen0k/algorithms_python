"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.
Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.
Решите задачу тремя способами:
3) с помощью встроенной функции поиска медианы
сделайте замеры на массивах длиной 10, 100, 1000 элементов
В конце сделайте аналитику какой трех из способов оказался эффективнее
"""
from statistics import median
from random import randint
from timeit import timeit


def get_median(arr):
    return f"Медиана: {median(arr)} индекс: {arr.index(median(arr))}"


m = 10
arr_21 = [randint(-100, 100) for _ in range(m * 2 + 1)]
m = 100
arr_201 = [randint(-100, 100) for _ in range(m * 2 + 1)]
m = 1000
arr_2001 = [randint(-100, 100) for _ in range(m * 2 + 1)]

print(f"Исходный массив: {arr_21}")
print(get_median(arr_21[:]))
print("-" * 75)
print('Замеры времени поиска медианы для arr_21:', end=' ')
print(timeit("get_median(arr_21[:])", globals=globals(), number=1000))
print("-" * 75)
print('Замеры времени поиска медианы для arr_201:', end=' ')
print(timeit("get_median(arr_201[:])", globals=globals(), number=1000))
print("-" * 75)
print('Замеры времени поиска медианы для arr_2001:', end=' ')
print(timeit("get_median(arr_2001[:])", globals=globals(), number=1000))


''' Результат
Исходный массив: [-52, -31, -24, -60, 4, 67, -35, -52, -12, -6, -83, 3, 76, -61, -52, 65, -68, -98, -42, 78, 96]
Медиана: -31 индекс: 1
---------------------------------------------------------------------------
Замеры времени поиска медианы для arr_21: 0.001538799999999993
---------------------------------------------------------------------------
Замеры времени поиска медианы для arr_201: 0.0134996
---------------------------------------------------------------------------
Замеры времени поиска медианы для arr_2001: 0.34093529999999994
'''

""" Выводы
Самый долгий и неэффективный вариант - через сортировку, т.к. мы каждый раз сортируем полностью массив, в чем нет 
смысла, для нашей задачи. Результат для 2001 элемента 196 сек. На втором месте по скорости находится метод через удаление
максимальных значений, т.к. у нас нет необходимости сортировать массив полностью.  Результат для 2001 элемента 21 сек.
Самым быстрым вариантом оказалось использование функции median из модуля statistics.  Результат для 2001 элемента 
0.3 сек. Таким образом, самый быстрый и выгодный вариант для поиска медианы - это функция median из модуля statistics.
"""