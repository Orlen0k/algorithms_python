"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.
ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
Это файл для второго скрипта
"""

'''Задача
Написать функцию thesaurus_adv(), принимающую в качестве аргументов строки в формате «Имя Фамилия» и возвращающую 
словарь, в котором ключи — первые буквы фамилий, а значения — словари, реализованные по схеме предыдущего задания 
и содержащие записи, в которых фамилия начинается с соответствующей буквы. 
Например:
>>> thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева")
{
    "А": {
        "П": ["Петр Алексеев"]
    },
    "И": {
        "И": ["Илья Иванов"]
    },
    "С": {
        "И": ["Иван Сергеев", "Инна Серова"], 
        "А": ["Анна Савельева"]
    }
}
'''

from memory_profiler import memory_usage
from collections import defaultdict


# Декоратор для профилирования памяти
def memory_measur(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return mem_diff

    return wrapper


# Базовая реализация
@memory_measur
def thesaurus_adv(name_list):
    name_dict = {}
    for name in name_list:
        key_name = name[0].upper()
        key_surname = name.split(" ")[1][0]
        if key_surname in name_dict:
            if key_name in name_dict[key_surname]:
                name_dict[key_surname][key_name].append(name)
            else:
                name_dict[key_surname][key_name] = [name]
        else:
            name_dict[key_surname] = {key_name: [name]}
    return name_dict


# Оптимизированная реализация
@memory_measur
def thesaurus_adv_up(name_list):
    name_dict = defaultdict(dict)
    for name in name_list:
        key_name = name[0].upper()
        key_surname = name.split(" ")[1][0]
        if key_name in name_dict[key_surname]:
            name_dict[key_surname][key_name].append(name)
        else:
            name_dict[key_surname][key_name] = [name]
    return name_dict


string = ["Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева"]

print(f"Базовая реализация заняла памяти: {thesaurus_adv(string)} Mib")
print(f"Оптимизированная реализация заняла памяти: {thesaurus_adv_up(string)} Mib")

''' Результат 
Базовая реализация заняла памяти: 0.01171875 Mib
Оптимизированная реализация заняла памяти: 0.00390625 Mib
'''
'''Анализ измененного кода
Использовал в решении defaultdict вместо обычных словарей, что позволило сократить затраты памяти 
'''