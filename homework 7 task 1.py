"""
Задание 1.
Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.
Сортировка должна быть реализована в виде функции.
Обязательно доработайте алгоритм (сделайте его умнее)!
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.
Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""

from random import randint
from timeit import timeit


# Стандартная реализация
def bubble_sort(lst_obj):
    n = 1
    while n < len(lst_obj):
        for i in range(len(lst_obj) - n):
            if lst_obj[i] < lst_obj[i + 1]:
                lst_obj[i], lst_obj[i + 1] = lst_obj[i + 1], lst_obj[i]
        n += 1
    return lst_obj


orig_list_10 = [randint(-100, 100) for _ in range(10)]
orig_list_100 = [randint(-100, 100) for _ in range(100)]

print('Обычная реализация')
print(f"Исходный массив: {orig_list_10}")
print(f"Результирующий массив: {bubble_sort(orig_list_10[:])}\n")


# Оптимизированная реализация
def bubble_sort_up(lst_obj):
    for i in range(len(lst_obj) - 1):
        for j in range(i, len(lst_obj)):
            if lst_obj[i] < lst_obj[j]:
                lst_obj[i], lst_obj[j] = lst_obj[j], lst_obj[i]

    return lst_obj


print('Оптимизированная реализация')
print(f"Исходный массив: {orig_list_10}")
print(f"Результирующий массив: {bubble_sort_up(orig_list_10[:])}\n")

# Замеры времени
print('Замеры времени на обычном алгоритме(n = 10):', end=' ')
print(timeit("bubble_sort(orig_list_10[:])", globals=globals(), number=10000))
print('Замеры времени на обычном алгоритме(n = 100):', end=' ')
print(timeit("bubble_sort(orig_list_100[:])", globals=globals(), number=10000))
print("-" * 75)
print('Замеры времени на оптимизированном алгоритме(n = 10):', end=' ')
print(timeit("bubble_sort_up(orig_list_10[:])", globals=globals(), number=10000))
print('Замеры времени на оптимизированном алгоритме(n = 100):', end=' ')
print(timeit("bubble_sort_up(orig_list_100[:])", globals=globals(), number=10000))

"""Результаты
Обычная реализация
Исходный массив: [-64, -77, 79, -30, 47, -13, -51, -34, -9, 62]
Результирующий массив: [-77, -64, -51, -34, -30, -13, -9, 47, 62, 79]
Оптимизированная реализация
Исходный массив: [-64, -77, 79, -30, 47, -13, -51, -34, -9, 62]
Результирующий массив: [-77, -64, -51, -34, -30, -13, -9, 47, 62, 79]
Замеры времени на обычном алгоритме(n = 10): 0.05788410000000001
Замеры времени на обычном алгоритме(n = 100): 4.9110397
---------------------------------------------------------------------------
Замеры времени на оптимизированном алгоритме(n = 10): 0.048748299999999745
Замеры времени на оптимизированном алгоритме(n = 100): 3.340247500000001
"""
"""Выводы:
После оптимизации программы сортировки удалось ускорить время ее выполнения, данный результат был достигнут путем 
изменения while на for c конечным количеством итераций.
Я считаю, что данный метод оптимизации является универсальным и может работать с любыми массивами.     
"""