"""
Задание 4.
Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему
Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.
Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.
Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

# сложность О(n)

def authentication_f(users,user_name, user_pass):
    for key, value in users.items():
        if key == user_name:
            if value ['password'] == user_pass and value ['activation']:
                return 'Доступ разрешен'
            elif value['password'] == user_pass and not value ['activation']:
                return 'Активируйте учетную запись'
            elif value['password'] != user_pass:
                return 'Неправильынй пароль'
    return 'Нет такого пользователя'

# сложность О(1)

def authentication_s(users,user_name, user_pass):
    if users.get(user_name):
        if users[user_name]['password'] == user_pass and users[user_name]['activation']:
            return 'Доступ разрешен'
        elif users[user_name]['password'] == user_pass and not users[user_name]['activation']:
            return 'Активируйте учетную запись'
        elif users[user_name]['password'] != user_pass:
            return 'Неправильынй пароль'



# Эффективнее 1 способ, т.к. он лаконичнее и итоговая сложность О(n) меньше, чем О(1)


